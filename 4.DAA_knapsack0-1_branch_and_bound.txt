def knapsack_tabulation(W, weights, values, n):
    dp = [[0] * (W + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, W + 1):
            if weights[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = max(
                    dp[i - 1][j], values[i - 1] + dp[i - 1][j - weights[i - 1]]
                )
    return dp[n][W]

def main():
    W = int(input("Enter the maximum weight capacity of the knapsack: "))
    n = int(input("Enter the number of items: "))
    
    weights = []
    values = []

    print("Enter the weights and values of each item:")
    for i in range(n):
        weight = int(input(f"Weight of item {i + 1}: "))
        value = int(input(f"Value of item {i + 1}: "))
        weights.append(weight)
        values.append(value)

    max_value = knapsack_tabulation(W, weights, values, n)
    print(f"The maximum value that can be achieved in the knapsack is: {max_value}")

if __name__ == "__main__":
    main()







Certainly! Here’s a line-by-line explanation of the corrected code.

knapsack_tabulation Function
python
Copy code
def knapsack_tabulation(W, weights, values, n):
Defines the function knapsack_tabulation, which solves the knapsack problem using tabulation (dynamic programming).
Parameters:
W: Maximum weight capacity of the knapsack.
weights: List of item weights.
values: List of item values.
n: Number of items.
python
Copy code
    dp = [[0] * (W + 1) for _ in range(n + 1)]
Initializes a 2D list dp of size (n + 1) x (W + 1), where each entry is initialized to 0.
dp[i][j] represents the maximum value achievable with the first i items and a knapsack capacity j.
python
Copy code
    for i in range(1, n + 1):
Loops through each item i from 1 to n. The loop starts from 1 because dp[0][...] and dp[...][0] represent the base cases (0 items or 0 capacity).
python
Copy code
        for j in range(1, W + 1):
Loops through each possible knapsack capacity j from 1 to W.
python
Copy code
            if weights[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
Checks if the weight of the current item (weights[i - 1]) exceeds the current knapsack capacity j.
If true, the item cannot be included in the knapsack, so dp[i][j] is set to dp[i - 1][j], which is the maximum value achievable without this item.
python
Copy code
            else:
                dp[i][j] = max(
                    dp[i - 1][j], values[i - 1] + dp[i - 1][j - weights[i - 1]]
                )
If the item’s weight is less than or equal to j, there are two choices:
Exclude the item: The maximum value is dp[i - 1][j].
Include the item: Add the item’s value (values[i - 1]) to the maximum value achievable with the remaining capacity (j - weights[i - 1]), given by dp[i - 1][j - weights[i - 1]].
dp[i][j] is set to the maximum of these two choices.
python
Copy code
    return dp[n][W]
Returns the maximum value achievable with n items and a knapsack capacity W, which is stored in dp[n][W].
main Function
python
Copy code
def main():
Defines the main function, which handles user input and displays the result.
python
Copy code
    W = int(input("Enter the maximum weight capacity of the knapsack: "))
    n = int(input("Enter the number of items: "))
Prompts the user to input W (maximum weight capacity) and n (number of items).
python
Copy code
    weights = []
    values = []
Initializes empty lists weights and values to store the weights and values of each item.
python
Copy code
    print("Enter the weights and values of each item:")
Prints instructions for the user to enter the weights and values of each item.
python
Copy code
    for i in range(n):
        weight = int(input(f"Weight of item {i + 1}: "))
        value = int(input(f"Value of item {i + 1}: "))
        weights.append(weight)
        values.append(value)
Loops through each item index i from 0 to n - 1:
Prompts the user for the weight and value of the item.
Appends the entered weight to weights and the entered value to values.
python
Copy code
    max_value = knapsack_tabulation(W, weights, values, n)
Calls the knapsack_tabulation function with the provided inputs and stores the result (maximum value achievable) in max_value.
python
Copy code
    print(f"The maximum value that can be achieved in the knapsack is: {max_value}")
Prints the maximum value achievable with the given knapsack capacity and items.
Execution Guard
python
Copy code
if __name__ == "__main__":
    main()
Ensures main() is only called if this file is executed as a standalone script.